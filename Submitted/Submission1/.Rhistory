setwd("~/GitHub/Airbnb-ML/Submitted/Submission1")
library(randomForest)
require(caTools)
library(ROCR)
set.seed(12345)
df = read.csv("train_cleaned_submit1.csv")
df_competition = read.csv("test_cleaned_submit1.csv")
## Randomly partition the data into 30% testing data and the remaining 70% data.
test_instn = sample(nrow(df), 0.30*nrow(df))
df_test <- df[test_instn,]
## Save the rest of the data as the data that isn't testing
df_rest <- df[-test_instn,]
## e. Randomly partition the remaining data into 75% training data and 25% validation data.
valid_instn = sample(nrow(df_rest), 0.25*nrow(df_rest))
df_valid <- df_rest[valid_instn,]
df_train <- df_rest[-valid_instn,]
summary(df_train)
# convert target variable to factor
df_train$high_booking_rate <- as.factor(df_train$high_booking_rate)
# rf model
rf <- randomForest(
df_train$high_booking_rate ~.,
data=df_train
)
pred = predict(rf, newdata=df_competition)
pred = predict(rf, newdata=df_valid)
mc = table(df_test$high_booking_rate, pred)
acc = (mc[1] + mc[4])/sum(mc)
acc
pred = predict(rf, newdata=df_test)
mc = table(df_test$high_booking_rate, pred)
acc = (mc[1] + mc[4])/sum(mc)
acc
pred = predict(rf, newdata=df_competition)
write.csv(pred, file ='trytry.csv')
#load libraries
# 0. Load Libraries
library(readr)
library(tm)
library(SnowballC)
library(dplyr)
#read data col_types = cols(zipcode = col_character()
train_x <- read_csv("Data/airbnb_train_x.csv")
train_y <- read_csv("Data/airbnb_train_y.csv")
# merge features and label
df <- merge(train_x, train_y, by.x = 'X1', by.y = 'X1')

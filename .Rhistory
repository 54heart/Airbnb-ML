propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
require_guest_profile_picture+ requires_license+
roomEntire.home.apt+ roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
df = read.csv("train_cleaned.csv")
## Randomly partition the data into 30% testing data and the remaining 70% data.
test_instn = sample(nrow(df), 0.3*nrow(df))
df_test <- df[test_instn,]
## Save the rest of the data as the data that isn't testing
df_rest <- df[-test_instn,]
## e. Randomly partition the remaining data into 75% training data and 25% validation data.
valid_instn = sample(nrow(df_rest), 0.25*nrow(df_rest))
df_valid <- df_rest[valid_instn,]
df_train <- df_rest[-valid_instn,]
model_log <- glm(high_booking_rate~accommodates+ amenities_count+
availability_365+ availability_60+availability_90+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+ cleaning_fee+ extra_people+
first_review+ guests_included+ host_about+
host_has_profile_pic+ host_identity_verified+
host_is_superhost+ host_listings_count+
host_response_rate+ host_response_time+ experience+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+ minimum_nights+
price+ propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
require_guest_profile_picture+ requires_license+
roomEntire.home.apt+ roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
summary(model_log)
log_valid_probs <- predict(model_log, newdata = df_valid, type = "response")
library(ROCR)
pred <- prediction(log_valid_probs, df_valid$high_booking_rate)
tpr.perf = performance(pred, measure = "tpr")
tnr.perf = performance(pred, measure = "tnr")
acc.perf = performance(pred, measure = "acc")
plot(tpr.perf,ylim=c(0,1))
plot(tnr.perf, add=T,col='green')
plot(acc.perf,add=T,col = 'red')
#getting the accuracy against best cutoff; best stores the cutoff index
best = which.max(slot(acc.perf,"y.values")[[1]])
max.acc = slot(acc.perf,"y.values")[[1]][best]
max.cutoff = slot(acc.perf,"x.values")[[1]][best]
print(c(accuracy= max.acc, cutoff = max.cutoff))
confusion_matrix <- function(preds, actuals, cutoff){
classifications <- ifelse(preds>cutoff,1,0)
##careful with positives and negatives here!
confusion_matrix <- table(actuals,classifications)
}
#log_valid_preds = predict(model_log,newdata=df_valid,type="response")
log_matrix <- confusion_matrix(log_valid_probs, df_valid$high_booking_rate,0.441866)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#Trying to improve the model
log_matrix
log_com_preds = predict(model_log,newdata=df_competition,type="response")
#log_matrix <- confusion_matrix(log_test_preds, df_competition$high_booking_rate,.5)
library(ROCR)
pred <- prediction(log_com_preds,df_test$high_booking_rate)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
log_test_preds = predict(model_log,newdata=df_competition,type="response")
log_matrix <- confusion_matrix(log_test_preds, df_competition$high_booking_rate,.5)
pred <- prediction(log_test_probs, df_competition$high_booking_rate)
log_test_probs = predict(model_log,newdata=df_competition,type="response")
pred <- prediction(log_test_probs, df_competition$high_booking_rate)
pred <- prediction(log_test_probs, df_competition$high_booking_rate)
log_test_probs
log_matrix <- confusion_matrix(log_test_probs, df_competition$high_booking_rate,0.441866)
length(log_test_probs)
length(df_competition$high_booking_rate)
## Randomly partition the data into 30% testing data and the remaining 70% data.
test_instn = sample(nrow(df), 0.25*nrow(df))
df_test <- df[test_instn,]
## Save the rest of the data as the data that isn't testing
df_rest <- df[-test_instn,]
## e. Randomly partition the remaining data into 75% training data and 25% validation data.
valid_instn = sample(nrow(df_rest), 0.3*nrow(df_rest))
df_valid <- df_rest[valid_instn,]
df_train <- df_rest[-valid_instn,]
View(df_competition)
model_log <- glm(high_booking_rate~accommodates+ amenities_count+
availability_365+ availability_60+availability_90+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+ cleaning_fee+ extra_people+
first_review+ guests_included+ host_about+
host_has_profile_pic+ host_identity_verified+
host_is_superhost+ host_listings_count+
host_response_rate+ host_response_time+ experience+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+ minimum_nights+
price+ propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
require_guest_profile_picture+ requires_license+
roomEntire.home.apt+ roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
summary(model_log)
log_valid_probs <- predict(model_log, newdata = df_valid, type = "response")
library(ROCR)
pred <- prediction(log_valid_probs, df_valid$high_booking_rate)
tpr.perf = performance(pred, measure = "tpr")
tnr.perf = performance(pred, measure = "tnr")
acc.perf = performance(pred, measure = "acc")
plot(tpr.perf,ylim=c(0,1))
plot(tnr.perf, add=T,col='green')
plot(acc.perf,add=T,col = 'red')
#getting the accuracy against best cutoff; best stores the cutoff index
best = which.max(slot(acc.perf,"y.values")[[1]])
max.acc = slot(acc.perf,"y.values")[[1]][best]
max.cutoff = slot(acc.perf,"x.values")[[1]][best]
print(c(accuracy= max.acc, cutoff = max.cutoff))
confusion_matrix <- function(preds, actuals, cutoff){
classifications <- ifelse(preds>cutoff,1,0)
##careful with positives and negatives here!
confusion_matrix <- table(actuals,classifications)
}
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#log_valid_preds = predict(model_log,newdata=df_valid,type="response")
log_matrix <- confusion_matrix(log_valid_probs, df_valid$high_booking_rate,0.4353808)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#Trying to improve the model
log_matrix
log_test_probs = predict(model_log,newdata=df_competition,type="response")
log_test_probs
#Now, fitting that to our test data from the training data
log_test_probs <- predict(model_log, newdata = df_test, type = "response")
log_matrix <- confusion_matrix(log_test_probs, df_test$high_booking_rate,0.4353808)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
## Randomly partition the data into 30% testing data and the remaining 70% data.
test_instn = sample(nrow(df), 0.3*nrow(df))
df_test <- df[test_instn,]
## Save the rest of the data as the data that isn't testing
df_rest <- df[-test_instn,]
## e. Randomly partition the remaining data into 75% training data and 25% validation data.
valid_instn = sample(nrow(df_rest), 0.25*nrow(df_rest))
df_valid <- df_rest[valid_instn,]
df_train <- df_rest[-valid_instn,]
model_log <- glm(high_booking_rate~accommodates+ amenities_count+
availability_365+ availability_60+availability_90+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+ cleaning_fee+ extra_people+
first_review+ guests_included+ host_about+
host_has_profile_pic+ host_identity_verified+
host_is_superhost+ host_listings_count+
host_response_rate+ host_response_time+ experience+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+ minimum_nights+
price+ propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
require_guest_profile_picture+ requires_license+
roomEntire.home.apt+ roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
summary(model_log)
log_valid_probs <- predict(model_log, newdata = df_valid, type = "response")
library(ROCR)
pred <- prediction(log_valid_probs, df_valid$high_booking_rate)
tpr.perf = performance(pred, measure = "tpr")
tnr.perf = performance(pred, measure = "tnr")
acc.perf = performance(pred, measure = "acc")
plot(tpr.perf,ylim=c(0,1))
plot(tnr.perf, add=T,col='green')
plot(acc.perf,add=T,col = 'red')
#getting the accuracy against best cutoff; best stores the cutoff index
best = which.max(slot(acc.perf,"y.values")[[1]])
max.acc = slot(acc.perf,"y.values")[[1]][best]
max.cutoff = slot(acc.perf,"x.values")[[1]][best]
print(c(accuracy= max.acc, cutoff = max.cutoff))
confusion_matrix <- function(preds, actuals, cutoff){
classifications <- ifelse(preds>cutoff,1,0)
##careful with positives and negatives here!
confusion_matrix <- table(actuals,classifications)
}
#log_valid_preds = predict(model_log,newdata=df_valid,type="response")
log_matrix <- confusion_matrix(log_valid_probs, df_valid$high_booking_rate,0.4420397)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#Now, fitting that to our test data subsetted from the training data
log_test_probs <- predict(model_log, newdata = df_test, type = "response")
log_matrix <- confusion_matrix(log_test_probs, df_test$high_booking_rate,0.4353808)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
## Randomly partition the data into 30% testing data and the remaining 70% data.
test_instn = sample(nrow(df), 0.25*nrow(df))
df_test <- df[test_instn,]
## Save the rest of the data as the data that isn't testing
df_rest <- df[-test_instn,]
## e. Randomly partition the remaining data into 75% training data and 25% validation data.
valid_instn = sample(nrow(df_rest), 0.3*nrow(df_rest))
df_valid <- df_rest[valid_instn,]
df_train <- df_rest[-valid_instn,]
model_log <- glm(high_booking_rate~accommodates+ amenities_count+
availability_365+ availability_60+availability_90+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+ cleaning_fee+ extra_people+
first_review+ guests_included+ host_about+
host_has_profile_pic+ host_identity_verified+
host_is_superhost+ host_listings_count+
host_response_rate+ host_response_time+ experience+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+ minimum_nights+
price+ propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
require_guest_profile_picture+ requires_license+
roomEntire.home.apt+ roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
summary(model_log)
log_valid_probs <- predict(model_log, newdata = df_valid, type = "response")
library(ROCR)
pred <- prediction(log_valid_probs, df_valid$high_booking_rate)
tpr.perf = performance(pred, measure = "tpr")
tnr.perf = performance(pred, measure = "tnr")
acc.perf = performance(pred, measure = "acc")
plot(tpr.perf,ylim=c(0,1))
plot(tnr.perf, add=T,col='green')
plot(acc.perf,add=T,col = 'red')
#getting the accuracy against best cutoff; best stores the cutoff index
best = which.max(slot(acc.perf,"y.values")[[1]])
max.acc = slot(acc.perf,"y.values")[[1]][best]
max.cutoff = slot(acc.perf,"x.values")[[1]][best]
print(c(accuracy= max.acc, cutoff = max.cutoff))
#log_valid_preds = predict(model_log,newdata=df_valid,type="response")
log_matrix <- confusion_matrix(log_valid_probs, df_valid$high_booking_rate,0.4844703)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#Now, fitting that to our test data subsetted from the training data
log_test_probs <- predict(model_log, newdata = df_test, type = "response")
log_matrix <- confusion_matrix(log_test_probs, df_test$high_booking_rate,0.4353808)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
set.seed(12345)
library(class)
df = read.csv("train_cleaned.csv")
df_competition = read.csv("test_cleaned.csv")
View(df_competition)
set.seed(12345)
library(class)
df = read.csv("train_cleaned.csv")
df_competition = read.csv("test_cleaned.csv")
View(df_competition)
#View(df_competition)
## Randomly partition the data into 30% testing data and the remaining 70% data.
test_instn = sample(nrow(df), 0.25*nrow(df))
df_test <- df[test_instn,]
## Save the rest of the data as the data that isn't testing
df_rest <- df[-test_instn,]
## e. Randomly partition the remaining data into 75% training data and 25% validation data.
valid_instn = sample(nrow(df_rest), 0.3*nrow(df_rest))
df_valid <- df_rest[valid_instn,]
df_train <- df_rest[-valid_instn,]
train.HBR=df_train$high_booking_rate
valid.HBR=df_valid$high_booking_rate
#Getting the columns you want
train.X=df_train[,c( "accommodates", "amenities_count", "availability_365", "availability_60", "availability_90", "bathrooms", "Real_Bed", "bedrooms", "beds", "cancellation_policy", "cleaning_fee", "extra_people", "first_review", "guests_included", "host_about", "host_has_profile_pic", "host_identity_verified", "host_is_superhost", "host_listings_count", "host_response_rate", "host_response_time", "experience", "instant_bookable", "is_business_travel_ready", "is_location_exact", "long_stay", "minimum_nights", "price", "propertyApartment", "propertyCommon_house", "propertySide_house", "propertyHotel", "propertySpecial", "require_guest_phone_verification", "require_guest_profile_picture", "requires_license", "roomEntire.home.apt", "roomPrivate.room", "roomShared.room", "security_deposit", "flexible")]
#Getting the columns you want
train.X=df_train[,c( "accommodates", "amenities_count", "availability_365", "availability_60", "availability_90", "bathrooms", "Real_Bed", "bedrooms", "beds", "cancellation_policy", "cleaning_fee", "extra_people", "first_review", "guests_included", "host_about", "host_has_profile_pic", "host_identity_verified", "host_is_superhost", "host_listings_count", "host_response_rate", "host_response_time", "experience", "instant_bookable", "is_business_travel_ready", "is_location_exact", "long_stay", "minimum_nights", "price", "propertyApartment", "propertyCommon_house", "propertySide_house", "propertyHotel", "propertySpecial", "require_guest_phone_verification", "require_guest_profile_picture", "requires_license", "roomEntire.home.apt", "roomPrivate.room", "roomShared.room", "security_deposit", "flexible")]
valid.X=credit_valid[,c("accommodates", "amenities_count", "availability_365", "availability_60", "availability_90", "bathrooms", "Real_Bed", "bedrooms", "beds", "cancellation_policy", "cleaning_fee", "extra_people", "first_review", "guests_included", "host_about", "host_has_profile_pic", "host_identity_verified", "host_is_superhost", "host_listings_count", "host_response_rate", "host_response_time", "experience", "instant_bookable", "is_business_travel_ready", "is_location_exact", "long_stay", "minimum_nights", "price", "propertyApartment", "propertyCommon_house", "propertySide_house", "propertyHotel", "propertySpecial", "require_guest_phone_verification", "require_guest_profile_picture", "requires_license", "roomEntire.home.apt", "roomPrivate.room", "roomShared.room", "security_deposit", "flexible")]
valid.X=df_valid[,c("accommodates", "amenities_count", "availability_365", "availability_60", "availability_90", "bathrooms", "Real_Bed", "bedrooms", "beds", "cancellation_policy", "cleaning_fee", "extra_people", "first_review", "guests_included", "host_about", "host_has_profile_pic", "host_identity_verified", "host_is_superhost", "host_listings_count", "host_response_rate", "host_response_time", "experience", "instant_bookable", "is_business_travel_ready", "is_location_exact", "long_stay", "minimum_nights", "price", "propertyApartment", "propertyCommon_house", "propertySide_house", "propertyHotel", "propertySpecial", "require_guest_phone_verification", "require_guest_profile_picture", "requires_license", "roomEntire.home.apt", "roomPrivate.room", "roomShared.room", "security_deposit", "flexible")]
test.X=df_test[,c("accommodates", "amenities_count", "availability_365", "availability_60", "availability_90", "bathrooms", "Real_Bed", "bedrooms", "beds", "cancellation_policy", "cleaning_fee", "extra_people", "first_review", "guests_included", "host_about", "host_has_profile_pic", "host_identity_verified", "host_is_superhost", "host_listings_count", "host_response_rate", "host_response_time", "experience", "instant_bookable", "is_business_travel_ready", "is_location_exact", "long_stay", "minimum_nights", "price", "propertyApartment", "propertyCommon_house", "propertySide_house", "propertyHotel", "propertySpecial", "require_guest_phone_verification", "require_guest_profile_picture", "requires_license", "roomEntire.home.apt", "roomPrivate.room", "roomShared.room", "security_deposit", "flexible")]
knn.pred_tr=knn(train.X,train.X,train.PROFITABLE,k=1)
knn.pred_tr=knn(train.X,train.X,train.HBR,k=1)
knn.pred_va=knn(train.X,valid.X,train.HBR,k=1)
grid_knn = c(1, 3, 5, 7, 9,11, 13,15,19, 21, 25, 31,35)
vals<- matrix(NA,nrow=13,ncol=3)
ind<-1
#calculate training and calidation accuracies for each k value in grid_knn
for (kval in grid_knn){ #for each value in the grid
knn.pred_va=knn(train.X,valid.X,train.HBR,k=kval)
knn.pred_tr=knn(train.X,train.X,train.HBR,k=kval)
#Computing the accuracy on validation and training
correct_va <- sum(ifelse(knn.pred_va==valid.HBR,1,0))
accuracy_va <- (1.0*correct_va)/nrow(valid.X)
correct_tr <- sum(ifelse(knn.pred_tr==train.HBR,1,0))
accuracy_tr <- (1.0*correct_tr)/nrow(train.X)
vals[ind,1] <- kval
vals[ind,2] <- accuracy_va
vals[ind,3] <- accuracy_tr
ind <-ind+1
}
summary(model_log)
#lasso variable importance:
library('caret')
lambdaValues <- 10^seq(-3, 3, length = 100)
install.packages("caret")
#lasso variable importance:
library('caret')
lambdaValues <- 10^seq(-3, 3, length = 100)
fitRidge <- train(as.factor(high_booking_rate)  ~
accommodates+ amenities_count+
availability_365+ availability_60+availability_90+availability_30+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+ cleaning_fee+ extra_people+
first_review+ guests_included+ host_about+
host_has_profile_pic+ host_identity_verified+
host_is_superhost+ host_listings_count+
host_response_rate+ host_response_time+ experience+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+ minimum_nights+
price+ propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
require_guest_profile_picture+ requires_license+
roomEntire.home.apt+ roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, family='binomial', data=airChicago, method='glmnet', trControl=trainControl(method='cv', number=10), tuneGrid = expand.grid(alpha=0, lambda=lambdaValues))
fitRidge <- train(as.factor(high_booking_rate)  ~
accommodates+ amenities_count+
availability_365+ availability_60+availability_90+availability_30+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+ cleaning_fee+ extra_people+
first_review+ guests_included+ host_about+
host_has_profile_pic+ host_identity_verified+
host_is_superhost+ host_listings_count+
host_response_rate+ host_response_time+ experience+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+ minimum_nights+
price+ propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
require_guest_profile_picture+ requires_license+
roomEntire.home.apt+ roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, family='binomial', data=df, method='glmnet', trControl=trainControl(method='cv', number=10), tuneGrid = expand.grid(alpha=0, lambda=lambdaValues))
varImp(fitRidge)$importance %>%
rownames_to_column(var = "Variable") %>%
mutate(Importance = scales::percent(Overall/100)) %>%
arrange(desc(Overall)) %>%
as_tibble()
library(dplyr)
varImp(fitRidge)$importance %>%
rownames_to_column(var = "Variable") %>%
mutate(Importance = scales::percent(Overall/100)) %>%
arrange(desc(Overall)) %>%
as_tibble()
varImp(fitRidge)$importance %>%
#rownames_to_column(var = "Variable") %>%
mutate(Importance = scales::percent(Overall/100)) %>%
arrange(desc(Overall)) %>%
as_tibble()
plot(varImp(fitRidge))
model_log <- glm(high_booking_rate~accommodates+ amenities_count+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+
guests_included+ host_about+
host_identity_verified+
host_is_superhost+
host_response_rate+ host_response_time+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+
propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
requires_license+
roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
summary(model_log)
log_valid_probs <- predict(model_log, newdata = df_valid, type = "response")
library(ROCR)
pred <- prediction(log_valid_probs, df_valid$high_booking_rate)
tpr.perf = performance(pred, measure = "tpr")
tnr.perf = performance(pred, measure = "tnr")
acc.perf = performance(pred, measure = "acc")
plot(tpr.perf,ylim=c(0,1))
plot(tnr.perf, add=T,col='green')
plot(acc.perf,add=T,col = 'red')
#getting the accuracy against best cutoff; best stores the cutoff index
best = which.max(slot(acc.perf,"y.values")[[1]])
max.acc = slot(acc.perf,"y.values")[[1]][best]
max.cutoff = slot(acc.perf,"x.values")[[1]][best]
print(c(accuracy= max.acc, cutoff = max.cutoff))
plot(varImp(fitRidge))
model_log <- glm(high_booking_rate~accommodates+ amenities_count+
bathrooms+ Real_Bed+ bedrooms+ beds+
cancellation_policy+require_guest_profile_picture+
guests_included+ host_about+host_has_profile_pic+
host_identity_verified+cleaning_fee+
host_is_superhost+
availability_60+availability_90+availability_30+
host_response_rate+ host_response_time+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+
propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
requires_license+
roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
summary(model_log)
log_valid_probs <- predict(model_log, newdata = df_valid, type = "response")
library(ROCR)
pred <- prediction(log_valid_probs, df_valid$high_booking_rate)
tpr.perf = performance(pred, measure = "tpr")
tnr.perf = performance(pred, measure = "tnr")
acc.perf = performance(pred, measure = "acc")
plot(tpr.perf,ylim=c(0,1))
plot(tnr.perf, add=T,col='green')
plot(acc.perf,add=T,col = 'red')
#getting the accuracy against best cutoff; best stores the cutoff index
best = which.max(slot(acc.perf,"y.values")[[1]])
max.acc = slot(acc.perf,"y.values")[[1]][best]
max.cutoff = slot(acc.perf,"x.values")[[1]][best]
print(c(accuracy= max.acc, cutoff = max.cutoff))
confusion_matrix <- function(preds, actuals, cutoff){
classifications <- ifelse(preds>cutoff,1,0)
##careful with positives and negatives here!
confusion_matrix <- table(actuals,classifications)
}
#log_valid_preds = predict(model_log,newdata=df_valid,type="response")
log_matrix <- confusion_matrix(log_valid_probs, df_valid$high_booking_rate,0.4844703)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#log_valid_preds = predict(model_log,newdata=df_valid,type="response")
log_matrix <- confusion_matrix(log_valid_probs, df_valid$high_booking_rate,0.4985761)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#Now, fitting that to our test data subsetted from the training data
log_test_probs <- predict(model_log, newdata = df_test, type = "response")
log_matrix <- confusion_matrix(log_test_probs, df_test$high_booking_rate,0.4353808)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
library(randomForest)
require(caTools)
library(ROCR)
set.seed(12345)
df = read.csv("data/train_cleaned.csv")
df = read.csv("train_cleaned.csv")
df_competition = read.csv("test_cleaned.csv")
## Randomly partition the data into 30% testing data and the remaining 70% data.
test_instn = sample(nrow(df), 0.25*nrow(df))
df_test <- df[test_instn,]
## Save the rest of the data as the data that isn't testing
df_rest <- df[-test_instn,]
## e. Randomly partition the remaining data into 75% training data and 25% validation data.
valid_instn = sample(nrow(df_rest), 0.3*nrow(df_rest))
df_valid <- df_rest[valid_instn,]
df_train <- df_rest[-valid_instn,]
summary(df_train)
df_train$high_booking_rate <- as.factor(df_train$high_booking_rate)
rf <- randomForest(
df_train$high_booking_rate ~ .-high_booking_rate,
data=df_train
)
pred = predict(rf, newdata=df_valid)
mc = table(df_valid$high_booking_rate, pred)
acc = (mc[1] + mc[4])/sum(mc)
acc
model_log <- glm(high_booking_rate~accommodates+ amenities_count+
bathrooms+ Real_Bed+ bedrooms+ beds+ price+
cancellation_policy+require_guest_profile_picture+
guests_included+ host_about+host_has_profile_pic+
host_identity_verified+cleaning_fee+
host_is_superhost+
availability_60+availability_90+availability_30+
host_response_rate+ host_response_time+
instant_bookable+ is_business_travel_ready+
is_location_exact+ long_stay+
propertyApartment+ propertyCommon_house+
propertySide_house+ propertyHotel+ propertySpecial+
require_guest_phone_verification+
requires_license+
roomPrivate.room+
roomShared.room+ security_deposit+ flexible
, data = df_train,family="binomial")
summary(model_log)
log_valid_probs <- predict(model_log, newdata = df_valid, type = "response")
library(ROCR)
pred <- prediction(log_valid_probs, df_valid$high_booking_rate)
tpr.perf = performance(pred, measure = "tpr")
tnr.perf = performance(pred, measure = "tnr")
acc.perf = performance(pred, measure = "acc")
plot(tpr.perf,ylim=c(0,1))
plot(tnr.perf, add=T,col='green')
plot(acc.perf,add=T,col = 'red')
#getting the accuracy against best cutoff; best stores the cutoff index
best = which.max(slot(acc.perf,"y.values")[[1]])
max.acc = slot(acc.perf,"y.values")[[1]][best]
max.cutoff = slot(acc.perf,"x.values")[[1]][best]
print(c(accuracy= max.acc, cutoff = max.cutoff))
confusion_matrix <- function(preds, actuals, cutoff){
classifications <- ifelse(preds>cutoff,1,0)
##careful with positives and negatives here!
confusion_matrix <- table(actuals,classifications)
}
#log_valid_preds = predict(model_log,newdata=df_valid,type="response")
log_matrix <- confusion_matrix(log_valid_probs, df_valid$high_booking_rate,0.4985761)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#Now, fitting that to our test data subsetted from the training data
log_test_probs <- predict(model_log, newdata = df_test, type = "response")
log_matrix <- confusion_matrix(log_test_probs, df_test$high_booking_rate,0.4804465)
acc_log = (log_matrix[1] + log_matrix[4])/sum(log_matrix)
acc_log
#0.7848243
#0.7740075 -> lasso
#
log_test_probs = predict(model_log,newdata=df_competition,type="response")
log_test_probs
pred = predict(rf, newdata=df_competition)
